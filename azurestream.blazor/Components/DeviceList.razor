@using System.Reactive.Linq
@using azurestream.blazor.Devices
@inject IDeviceService DeviceService
@implements IDisposable

@if (DeviceService.Devices is not null)
{
    if (DeviceService.Devices.Count > 0)
    {
        <div class="card-body">
            <a href="javascript:void(0);" class="card-link" @onclick="async () => await RefreshUI()">Refresh</a>
        <table class="table text-white">
            <tr>
                <th scope="col">Device Id</th>
                <th scope="col">Model Id</th>
                <th scope="col">Last Operation</th>
                <th scope="col">Op. Source</th>
                <th scope="col">Op. Timestamp</th>
                <th scope="col">Last Telemetry</th>
            </tr>

            @foreach (var item in DeviceService.Devices.OrderBy(d => d.DeviceId))
            {
                <tr>
                    <td><a href=/device/@item.DeviceId>@item.DeviceId</a></td>
                    <td>@item.ModelId</td>
                    <td>@item.LastOperation</td>
                    <td>@item.MessageSource</td>
                    <td>@item.LastOperationTimestamp</td>
                    <td>@item.LastTelemetryTimestamp</td>
                </tr>
            }
        </table>
        </div>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            Waiting for devices...
        </div>
    }
}

@code {
    Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timer = new Timer(async (object? stateInfo) =>
        {
            await RefreshUI();
        }, new System.Threading.AutoResetEvent(false), 1000, 5000);
    }

    private async Task RefreshUI()
    {
       await InvokeAsync(() => StateHasChanged()); 
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
